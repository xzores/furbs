CMake Error: The source directory "C:/Users/jakob/Nextcloud/libwebsockets/build" does not appear to contain CMakeLists.txt.
Specify --help for usage, or press the help button on the CMake GUI.
-- Cache values
// Build the testing tree.
BUILD_TESTING:BOOL=ON

// Path to a program.
CMAKE_AR:FILEPATH=C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.44.35207/bin/Hostx64/x64/lib.exe

// Build type
CMAKE_BUILD_TYPE:STRING=Release

// Semicolon separated list of supported configuration types, only supports Debug, Release, MinSizeRel, and RelWithDebInfo, anything else will be ignored.
CMAKE_CONFIGURATION_TYPES:STRING=Debug;Release;MinSizeRel;RelWithDebInfo

// Flags used by the CXX compiler during all build types.
CMAKE_CXX_FLAGS:STRING=/DWIN32 /D_WINDOWS /W3 /GR /EHsc

// Flags used by the CXX compiler during DEBUG builds.
CMAKE_CXX_FLAGS_DEBUG:STRING=/Zi /Ob0 /Od /RTC1

// Flags used by the CXX compiler during MINSIZEREL builds.
CMAKE_CXX_FLAGS_MINSIZEREL:STRING=/O1 /Ob1 /DNDEBUG

// Flags used by the CXX compiler during RELEASE builds.
CMAKE_CXX_FLAGS_RELEASE:STRING=/O2 /Ob2 /DNDEBUG

// Flags used by the CXX compiler during RELWITHDEBINFO builds.
CMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=/Zi /O2 /Ob1 /DNDEBUG

// Libraries linked by default with all C++ applications.
CMAKE_CXX_STANDARD_LIBRARIES:STRING=kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib

// Flags used by the C compiler during all build types.
CMAKE_C_FLAGS:STRING=/DWIN32 /D_WINDOWS /W3

// Flags used by the C compiler during DEBUG builds.
CMAKE_C_FLAGS_DEBUG:STRING=/Zi /Ob0 /Od /RTC1

// Flags used by the C compiler during MINSIZEREL builds.
CMAKE_C_FLAGS_MINSIZEREL:STRING=/O1 /Ob1 /DNDEBUG

// Flags used by the C compiler during RELEASE builds.
CMAKE_C_FLAGS_RELEASE:STRING=/O2 /Ob2 /DNDEBUG

// Flags used by the C compiler during RELWITHDEBINFO builds.
CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=/Zi /O2 /Ob1 /DNDEBUG

// Libraries linked by default with all C applications.
CMAKE_C_STANDARD_LIBRARIES:STRING=kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib

// Flags used by the linker during all build types.
CMAKE_EXE_LINKER_FLAGS:STRING=/machine:x64

// Flags used by the linker during DEBUG builds.
CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=/debug /INCREMENTAL

// Flags used by the linker during MINSIZEREL builds.
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=/INCREMENTAL:NO

// Flags used by the linker during RELEASE builds.
CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=/INCREMENTAL:NO

// Flags used by the linker during RELWITHDEBINFO builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=/debug /INCREMENTAL

// Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=C:/Program Files/libwebsockets

// Path to a program.
CMAKE_LINKER:FILEPATH=C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.44.35207/bin/Hostx64/x64/link.exe

// Flags used by the linker during the creation of modules during all build types.
CMAKE_MODULE_LINKER_FLAGS:STRING=/machine:x64

// Flags used by the linker during the creation of modules during DEBUG builds.
CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=/debug /INCREMENTAL

// Flags used by the linker during the creation of modules during MINSIZEREL builds.
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=/INCREMENTAL:NO

// Flags used by the linker during the creation of modules during RELEASE builds.
CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=/INCREMENTAL:NO

// Flags used by the linker during the creation of modules during RELWITHDEBINFO builds.
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=/debug /INCREMENTAL

// Path to a program.
CMAKE_MT:FILEPATH=CMAKE_MT-NOTFOUND

// RC compiler
CMAKE_RC_COMPILER:FILEPATH=rc

// Flags for Windows Resource Compiler during all build types.
CMAKE_RC_FLAGS:STRING=-DWIN32

// Flags for Windows Resource Compiler during DEBUG builds.
CMAKE_RC_FLAGS_DEBUG:STRING=-D_DEBUG

// Flags for Windows Resource Compiler during MINSIZEREL builds.
CMAKE_RC_FLAGS_MINSIZEREL:STRING=

// Flags for Windows Resource Compiler during RELEASE builds.
CMAKE_RC_FLAGS_RELEASE:STRING=

// Flags for Windows Resource Compiler during RELWITHDEBINFO builds.
CMAKE_RC_FLAGS_RELWITHDEBINFO:STRING=

// Flags used by the linker during the creation of shared libraries during all build types.
CMAKE_SHARED_LINKER_FLAGS:STRING=/machine:x64

// Flags used by the linker during the creation of shared libraries during DEBUG builds.
CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=/debug /INCREMENTAL

// Flags used by the linker during the creation of shared libraries during MINSIZEREL builds.
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=/INCREMENTAL:NO

// Flags used by the linker during the creation of shared libraries during RELEASE builds.
CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=/INCREMENTAL:NO

// Flags used by the linker during the creation of shared libraries during RELWITHDEBINFO builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=/debug /INCREMENTAL

// If set, runtime paths are not added when installing shared libraries, but are added when building.
CMAKE_SKIP_INSTALL_RPATH:BOOL=NO

// If set, runtime paths are not added when using shared libraries.
CMAKE_SKIP_RPATH:BOOL=NO

// Flags used by the linker during the creation of static libraries during all build types.
CMAKE_STATIC_LINKER_FLAGS:STRING=/machine:x64

// Flags used by the linker during the creation of static libraries during DEBUG builds.
CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=

// Flags used by the linker during the creation of static libraries during MINSIZEREL builds.
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=

// Flags used by the linker during the creation of static libraries during RELEASE builds.
CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=

// Flags used by the linker during the creation of static libraries during RELWITHDEBINFO builds.
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=

// If this value is on, makefiles will be generated without the .SILENT directive, and all commands will be echoed to the console during the make.  This is useful for debugging only. With Visual Studio IDE projects all commands are done without /nologo.
CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE

// Path to the coverage program that CTest uses for performing coverage inspection
COVERAGE_COMMAND:FILEPATH=COVERAGE_COMMAND-NOTFOUND

// Extra command line flags to pass to the coverage tool
COVERAGE_EXTRA_FLAGS:STRING=-l

// How many times to retry timed-out CTest submissions.
CTEST_SUBMIT_RETRY_COUNT:STRING=3

// How long to wait between timed-out CTest submissions.
CTEST_SUBMIT_RETRY_DELAY:STRING=5

// Maximum time allowed before CTest will kill the test.
DART_TESTING_TIMEOUT:STRING=1500

// Avoid treating compiler warnings as fatal errors
DISABLE_WERROR:BOOL=OFF

// Path to a program.
GITCOMMAND:FILEPATH=C:/Program Files/Git/cmd/git.exe

// Git command line client
GIT_EXECUTABLE:FILEPATH=C:/Program Files/Git/cmd/git.exe

// Path to a file.
LIBCRYPTO_BIN:FILEPATH=LIBCRYPTO_BIN-NOTFOUND

// Path to a file.
LIBSSL_BIN:FILEPATH=LIBSSL_BIN-NOTFOUND

// Libwebsockets include directories
LIBWEBSOCKETS_INCLUDE_DIRS:PATH=C:/Users/jakob/Nextcloud/libwebsockets/lib;C:/Users/jakob/Nextcloud/libwebsockets/build

// Libwebsocket libraries
LIBWEBSOCKETS_LIBRARIES:STRING=websockets;websockets_shared

// Libwebsocket shared library
LIBWEBSOCKETS_LIBRARIES_SHARED:STRING=websockets_shared

// Libwebsocket static library
LIBWEBSOCKETS_LIBRARIES_STATIC:STRING=websockets

// Path to a library.
LIB_EAY_DEBUG:FILEPATH=C:/Users/jakob/Nextcloud/vcpkg/installed/x64-windows/debug/lib/libcrypto.lib

// Path to a library.
LIB_EAY_RELEASE:FILEPATH=C:/Users/jakob/Nextcloud/vcpkg/installed/x64-windows/lib/libcrypto.lib

// Android 7+ reportedly needs this
LWS_AVOID_SIGPIPE_IGN:BOOL=OFF

// Support external http proxies for client connections
LWS_CLIENT_HTTP_PROXYING:BOOL=ON

// Amount of callstack to snip from bottom
LWS_COMPRESSED_BACKTRACES_SNIP_POST:STRING=1

// Amount of callstack to snip from top
LWS_COMPRESSED_BACKTRACES_SNIP_PRE:STRING=2

// CTest will performs tests that need the Internet
LWS_CTEST_INTERNET_AVAILABLE:BOOL=ON

// Path to an external pthreads include directory
LWS_EXT_PTHREAD_INCLUDE_DIR:PATH=

// Path to an external pthreads library
LWS_EXT_PTHREAD_LIBRARIES:PATH=

// Also try to do dns resolution using gethostbyname if getaddrinfo fails
LWS_FALLBACK_GETHOSTBYNAME:BOOL=OFF

// Enable features recommended for use with gitohashi
LWS_FOR_GITOHASHI:BOOL=OFF

// Override header reduction optimization and include all like older lws versions
LWS_HTTP_HEADERS_ALL:BOOL=OFF

// Installation directory for executables
LWS_INSTALL_BIN_DIR:PATH=bin

// Installation directory for CMake files
LWS_INSTALL_CMAKE_DIR:PATH=cmake

// Installation directory for example files
LWS_INSTALL_EXAMPLES_DIR:PATH=bin

// Installation directory for header files
LWS_INSTALL_INCLUDE_DIR:PATH=include

// Installation directory for libraries
LWS_INSTALL_LIB_DIR:PATH=lib

// Compile with support for ipv6
LWS_IPV6:BOOL=OFF

// Path to the libmount include directory
LWS_LIBMOUNT_INCLUDE_DIRS:PATH=

// Path to the libmount library
LWS_LIBMOUNT_LIBRARIES:PATH=

// Link the test apps to the shared version of the library. Default is to link statically
LWS_LINK_TESTAPPS_DYNAMIC:BOOL=OFF

// Bitfield describing which log levels to force removed from the build
LWS_LOGGING_BITFIELD_CLEAR:STRING=0

// Bitfield describing which log levels to force included into the build
LWS_LOGGING_BITFIELD_SET:STRING=0

// Timestamp at start of logs
LWS_LOGS_TIMESTAMP:BOOL=ON

// Log tagged object lifecycle as NOTICE
LWS_LOG_TAG_LIFECYCLE:BOOL=ON

// Link to static MSVC runtime
LWS_MSVC_STATIC_RUNTIME:BOOL=OFF

// Remove everything from library except standalone SSPC client support
LWS_ONLY_SSPC:BOOL=OFF

// Server SSL certificate directory
LWS_OPENSSL_CLIENT_CERTS:PATH=../share

// Path to the OpenSSL include directory
LWS_OPENSSL_INCLUDE_DIRS:PATH=

// Path to the OpenSSL library
LWS_OPENSSL_LIBRARIES:PATH=

// Filepath of public JWK used to validate packages
LWS_OTA_PUBLIC_JWK_FILE:STRING=/.lws_ota/libwebsockets.org-ota-v1.public.jwk

// Build Variant ID for OTA filtering
LWS_OTA_VARIANT:STRING=set-LWS_OTA_VARIANT

// Android flavour of unix platform
LWS_PLAT_ANDROID:BOOL=OFF

// Build for deeply embedded baremetal
LWS_PLAT_BAREMETAL:BOOL=OFF

// Build for FreeRTOS
LWS_PLAT_FREERTOS:BOOL=OFF

// Build for OPTEE
LWS_PLAT_OPTEE:BOOL=OFF

// Build libwebsockets reproducible. It removes the build user and hostname from the build
LWS_REPRODUCIBLE:BOOL=ON

// Compile with support for DBUS
LWS_ROLE_DBUS:BOOL=OFF

// Compile with support for http/1 (needed for ws)
LWS_ROLE_H1:BOOL=ON

// Build with support for MQTT client
LWS_ROLE_MQTT:BOOL=OFF

// Compile with support for raw files
LWS_ROLE_RAW_FILE:BOOL=ON

// Raw packet proxy
LWS_ROLE_RAW_PROXY:BOOL=OFF

// Compile with support for websockets
LWS_ROLE_WS:BOOL=ON

// Path to the sqlite3 include directory
LWS_SQLITE3_INCLUDE_DIRS:PATH=

// Path to the sqlite3 library
LWS_SQLITE3_LIBRARIES:PATH=

// SSL support should make use of the OS-installed CA root certs
LWS_SSL_CLIENT_USE_OS_CA_CERTS:BOOL=ON

// Include SSL server use ECDH certificate
LWS_SSL_SERVER_WITH_ECDH_CERT:BOOL=OFF

// Build the static version of the library with position-independent code
LWS_STATIC_PIC:BOOL=OFF

// Turn off complaints about, eg, openssl 3 deprecated api usage
LWS_SUPPRESS_DEPRECATED_API_WARNINGS:BOOL=ON

// For debugging log the received plaintext as soon as decrypted
LWS_TLS_LOG_PLAINTEXT_RX:BOOL=OFF

// For debugging log the transmitted plaintext just before encryption
LWS_TLS_LOG_PLAINTEXT_TX:BOOL=OFF

// Compile with support for UNIX domain socket if OS supports it
LWS_UNIX_SOCK:BOOL=ON

// Don't use the BSD getifaddrs implementation from libwebsockets if it is missing (this will result in a compilation error) ... The default is to assume that your libc provides it. On some systems such as uclibc it doesn't exist.
LWS_WITHOUT_BUILTIN_GETIFADDRS:BOOL=OFF

// Don't build the lws sha-1 (eg, because openssl will provide it
LWS_WITHOUT_BUILTIN_SHA1:BOOL=OFF

// Don't build the client part of the library
LWS_WITHOUT_CLIENT:BOOL=OFF

// Don't build the daemonization api
LWS_WITHOUT_DAEMONIZE:BOOL=ON

// Force using pipe instead of eventfd
LWS_WITHOUT_EVENTFD:BOOL=OFF

// Don't compile with extensions
LWS_WITHOUT_EXTENSIONS:BOOL=ON

// Don't build the server part of the library
LWS_WITHOUT_SERVER:BOOL=OFF

// Don't build the libwebsocket-test-apps
LWS_WITHOUT_TESTAPPS:BOOL=OFF

// Don't build the client test application
LWS_WITHOUT_TEST_CLIENT:BOOL=OFF

// Don't build the ping test application
LWS_WITHOUT_TEST_PING:BOOL=OFF

// Don't build the test server
LWS_WITHOUT_TEST_SERVER:BOOL=OFF

// Don't build the test server version that uses external poll
LWS_WITHOUT_TEST_SERVER_EXTPOLL:BOOL=OFF

// Support generating Apache-compatible access logs
LWS_WITH_ACCESS_LOG:BOOL=OFF

// Enable support for ACME automatic cert acquisition + maintenance (letsencrypt etc)
LWS_WITH_ACME:BOOL=OFF

// Build lws_*alloc() with compressed backtraces (requires WITH_COMPRESSED_BACKTRACES)
LWS_WITH_ALLOC_METADATA_LWS:BOOL=OFF

// Enable alsa audio example
LWS_WITH_ALSA:BOOL=OFF

// Build with gcc runtime sanitizer options enabled (needs libasan)
LWS_WITH_ASAN:BOOL=OFF

// Use BoringSSL replacement for OpenSSL
LWS_WITH_BORINGSSL:BOOL=OFF

// Use bundled zlib version (Windows only)
LWS_WITH_BUNDLED_ZLIB:BOOL=ON

// Build file-backed lws-cache-ttl that uses netscape cookie jar format (linux-only)
LWS_WITH_CACHE_NSCOOKIEJAR:BOOL=ON

// With the Lightweight LECP CBOR Parser
LWS_WITH_CBOR:BOOL=OFF

// Build floating point types if building CBOR LECP
LWS_WITH_CBOR_FLOAT:BOOL=ON

// Include CGI (spawn process with network-connected stdin/out/err) APIs
LWS_WITH_CGI:BOOL=OFF

// Build with support for compressed backtraces
LWS_WITH_COMPRESSED_BACKTRACES:BOOL=OFF

// Collect introspectable connection latency stats on individual client connections
LWS_WITH_CONMON:BOOL=ON

// COSE CBOR Signature / Encryption / Keys (RFC8152) API
LWS_WITH_COSE:BOOL=OFF

// Store and allow querying custom HTTP headers (H1 only)
LWS_WITH_CUSTOM_HEADERS:BOOL=ON

// Use CyaSSL replacement for OpenSSL. When setting this, you also need to specify LWS_CYASSL_LIBRARIES and LWS_CYASSL_INCLUDE_DIRS
LWS_WITH_CYASSL:BOOL=OFF

// Directory scanning api support
LWS_WITH_DIR:BOOL=ON

// Hashed cache directory with lazy LRU deletion to size limit (unrelated to lws_cache_ttl)
LWS_WITH_DISKCACHE:BOOL=OFF

// Enable features recommended for distro packaging
LWS_WITH_DISTRO_RECOMMENDED:BOOL=OFF

// Enable Display List Objects
LWS_WITH_DLO:BOOL=ON

// With generic drivers for gpio, i2c, display etc
LWS_WITH_DRIVERS:BOOL=OFF

// Build for ESP32
LWS_WITH_ESP32:BOOL=OFF

// Compile event lib support into runtime-selected plugins
LWS_WITH_EVLIB_PLUGINS:BOOL=OFF

// Export libwebsockets CMake targets.  Disable if they conflict with an outer cmake project.
LWS_WITH_EXPORT_LWSTARGETS:BOOL=ON

// Support external POLL integration using callback messages (not recommended)
LWS_WITH_EXTERNAL_POLL:BOOL=OFF

// Enable gcc -fanalyzer if compiler supports
LWS_WITH_FANALYZER:BOOL=OFF

// Support file operations vfs
LWS_WITH_FILE_OPS:BOOL=ON

// Overlayfs and fallback mounting apis
LWS_WITH_FSMOUNT:BOOL=OFF

// Full Text Search support
LWS_WITH_FTS:BOOL=OFF

// Build with gcc gcov coverage instrumentation
LWS_WITH_GCOV:BOOL=OFF

// Enable support for Generic Crypto apis independent of TLS backend
LWS_WITH_GENCRYPTO:BOOL=OFF

// Compile with support for glib event loop
LWS_WITH_GLIB:BOOL=OFF

// Enable gtk example
LWS_WITH_GTK:BOOL=OFF

// Enable internal minimal gzip inflator
LWS_WITH_GZINFLATE:BOOL=ON

// Compile with server support for HTTP/2
LWS_WITH_HTTP2:BOOL=ON

// Support Basic Auth
LWS_WITH_HTTP_BASIC_AUTH:BOOL=ON

// Also offer brotli http stream compression (requires LWS_WITH_HTTP_STREAM_COMPRESSION)
LWS_WITH_HTTP_BROTLI:BOOL=OFF

// Support Digest Auth (caution deprecated crypto)
LWS_WITH_HTTP_DIGEST_AUTH:BOOL=ON

// Support for active HTTP proxying
LWS_WITH_HTTP_PROXY:BOOL=OFF

// Support HTTP stream compression
LWS_WITH_HTTP_STREAM_COMPRESSION:BOOL=OFF

// Include less common http header support
LWS_WITH_HTTP_UNCOMMON_HEADERS:BOOL=ON

// Enable libhubbub rewriting support
LWS_WITH_HUBBUB:BOOL=OFF

// JOSE JSON Web Signature / Encryption / Keys (RFC7515/6/) API
LWS_WITH_JOSE:BOOL=OFF

// Enable stateful JPEG stream decoder
LWS_WITH_JPEG:BOOL=ON

// JSON RPC support
LWS_WITH_JSONRPC:BOOL=ON

// With the Lightweight JSON Parser
LWS_WITH_LEJP:BOOL=ON

// With LEJP configuration parser as used by lwsws
LWS_WITH_LEJP_CONF:BOOL=ON

// With the Lightweight HTML5 parser
LWS_WITH_LHP:BOOL=ON

// Compile with support for libev
LWS_WITH_LIBEV:BOOL=OFF

// Compile with support for libevent
LWS_WITH_LIBEVENT:BOOL=OFF

// Compile with support for libuv
LWS_WITH_LIBUV:BOOL=OFF

// lwsac Chunk Allocation api
LWS_WITH_LWSAC:BOOL=ON

// Libwebsockets Webserver
LWS_WITH_LWSWS:BOOL=OFF

// Support lws_dsh_t Disordered Shared Heap
LWS_WITH_LWS_DSH:BOOL=OFF

// Use mbedTLS (>=2.0) replacement for OpenSSL. When setting this, you also may need to specify LWS_MBEDTLS_LIBRARIES and LWS_MBEDTLS_INCLUDE_DIRS
LWS_WITH_MBEDTLS:BOOL=OFF

// Build the ttf to mcufont encoder
LWS_WITH_MCUFONT_ENCODER:BOOL=OFF

// Also build the normally standalone minimal examples, for QA
LWS_WITH_MINIMAL_EXAMPLES:BOOL=ON

// Use miniz instead of zlib
LWS_WITH_MINIZ:BOOL=OFF

// Compile with network-related code
LWS_WITH_NETWORK:BOOL=ON

// Disable all logging other than _err and _user from being compiled in
LWS_WITH_NO_LOGS:BOOL=OFF

// Build with support for Over The Air update download and validation
LWS_WITH_OTA:BOOL=OFF

// Track peers and restrict resources a single peer can allocate
LWS_WITH_PEER_LIMITS:BOOL=OFF

// Support plugins for protocols and extensions (implies LWS_WITH_PLUGINS_API)
LWS_WITH_PLUGINS:BOOL=OFF

// Build generic lws_plugins apis (see LWS_WITH_PLUGINS to also build protocol plugins)
LWS_WITH_PLUGINS_API:BOOL=OFF

// Build the plugin protocols directly into lws library
LWS_WITH_PLUGINS_BUILTIN:BOOL=OFF

// Support http ranges (RFC7233)
LWS_WITH_RANGES:BOOL=OFF

// Compile with support for sd-event loop
LWS_WITH_SDEVENT:BOOL=OFF

// Secure Streams protocol-agnostic API
LWS_WITH_SECURE_STREAMS:BOOL=ON

// Secure Streams Auth support for AWS Sigv4
LWS_WITH_SECURE_STREAMS_AUTH_SIGV4:BOOL=OFF

// Secure Streams protocol buffer dump
LWS_WITH_SECURE_STREAMS_BUFFER_DUMP:BOOL=OFF

// Secure Streams C++ classes
LWS_WITH_SECURE_STREAMS_CPP:BOOL=OFF

// Secure Streams support to work across processes
LWS_WITH_SECURE_STREAMS_PROXY_API:BOOL=OFF

// Secure Streams Policy is hardcoded only
LWS_WITH_SECURE_STREAMS_STATIC_POLICY_ONLY:BOOL=OFF

// Auth support for api.amazon.com
LWS_WITH_SECURE_STREAMS_SYS_AUTH_API_AMAZON_COM:BOOL=OFF

// Selftests run at context creation
LWS_WITH_SELFTESTS:BOOL=OFF

// Build the shared version of the library
LWS_WITH_SHARED:BOOL=ON

// Allow use of SOCKS5 proxy on client connections
LWS_WITH_SOCKS5:BOOL=OFF

// Spawn subprocesses with piped stdin/out/stderr
LWS_WITH_SPAWN:BOOL=OFF

// Require SQLITE3 support
LWS_WITH_SQLITE3:BOOL=OFF

// Include SSL support (defaults to OpenSSL or similar, mbedTLS if LWS_WITH_MBEDTLS is set)
LWS_WITH_SSL:BOOL=ON

// Secure Streams directly set/get metadata w/o policy
LWS_WITH_SS_DIRECT_PROTOCOL_STR:BOOL=OFF

// Build the static version of the library
LWS_WITH_STATIC:BOOL=ON

// Generic struct serialization to and from JSON
LWS_WITH_STRUCT_JSON:BOOL=OFF

// Generic struct serialization to and from SQLITE3
LWS_WITH_STRUCT_SQLITE3:BOOL=OFF

// Enable zombie lws_sul checking on object deletion
LWS_WITH_SUL_DEBUGGING:BOOL=OFF

// Nonblocking internal IPv4 + IPv6 DNS resolver
LWS_WITH_SYS_ASYNC_DNS:BOOL=OFF

// Build in tiny DHCP client
LWS_WITH_SYS_DHCP_CLIENT:BOOL=OFF

// Enable fault injection support
LWS_WITH_SYS_FAULT_INJECTION:BOOL=OFF

// Lws Metrics API
LWS_WITH_SYS_METRICS:BOOL=OFF

// Build in tiny ntpclient good for tls date validation and run via lws_system
LWS_WITH_SYS_NTPCLIENT:BOOL=OFF

// Lws System Message Distribution
LWS_WITH_SYS_SMD:BOOL=OFF

// lws_system state support
LWS_WITH_SYS_STATE:BOOL=ON

// Managed worker thread pool support (relies on pthreads)
LWS_WITH_THREADPOOL:BOOL=OFF

// Enable dynamically computing which trusted TLS CA is needed to be instantiated
LWS_WITH_TLS_JIT_TRUST:BOOL=OFF

// Enable persistent, resumable TLS sessions
LWS_WITH_TLS_SESSIONS:BOOL=ON

// Platform supports UDP
LWS_WITH_UDP:BOOL=ON

// Compile with support for uloop
LWS_WITH_ULOOP:BOOL=OFF

// Enable stateful PNG stream decoder
LWS_WITH_UPNG:BOOL=ON

// Wake On Lan support
LWS_WITH_WOL:BOOL=ON

// Use wolfSSL replacement for OpenSSL. When setting this, you also may need to specify LWS_WOLFSSL_LIBRARIES and LWS_WOLFSSL_INCLUDE_DIRS
LWS_WITH_WOLFSSL:BOOL=OFF

// Support serving pre-zipped files
LWS_WITH_ZIP_FOPS:BOOL=OFF

// Include zlib support (required for extensions)
LWS_WITH_ZLIB:BOOL=OFF

// Path to the wolfSSL include directory
LWS_WOLFSSL_INCLUDE_DIRS:PATH=

// Path to the wolfSSL library
LWS_WOLFSSL_LIBRARIES:PATH=

// Path to the zlib/miniz include directory
LWS_ZLIB_INCLUDE_DIRS:PATH=

// Path to the zlib/miniz library
LWS_ZLIB_LIBRARIES:PATH=

// Command to build the project
MAKECOMMAND:STRING="C:\Program Files\CMake\bin\cmake.exe" --build . --config "${CTEST_CONFIGURATION_TYPE}"

// Path to the memory checking command, used for memory error detection.
MEMORYCHECK_COMMAND:FILEPATH=MEMORYCHECK_COMMAND-NOTFOUND

// File that contains suppressions for the memory checker
MEMORYCHECK_SUPPRESSIONS_FILE:FILEPATH=

// Path to a file.
OPENSSL_APPLINK_SOURCE:FILEPATH=C:/Users/jakob/Nextcloud/vcpkg/installed/x64-windows/include/openssl/applink.c

// Openssl executable
OPENSSL_EXECUTABLE:FILEPATH=OPENSSL_EXECUTABLE-NOTFOUND

// Path to a file.
OPENSSL_INCLUDE_DIR:PATH=C:/Users/jakob/Nextcloud/vcpkg/installed/x64-windows/include

// Arguments to supply to pkg-config
PKG_CONFIG_ARGN:STRING=

// pkg-config executable
PKG_CONFIG_EXECUTABLE:FILEPATH=PKG_CONFIG_EXECUTABLE-NOTFOUND

// Name of the computer/site where compile is being run
SITE:STRING=DESKTOP-Q8NV46J

// Path to a library.
SSL_EAY_DEBUG:FILEPATH=C:/Users/jakob/Nextcloud/vcpkg/installed/x64-windows/debug/lib/libssl.lib

// Path to a library.
SSL_EAY_RELEASE:FILEPATH=C:/Users/jakob/Nextcloud/vcpkg/installed/x64-windows/lib/libssl.lib

// Path to a program.
VALGRIND:FILEPATH=VALGRIND-NOTFOUND

// Automatically copy dependencies into the output directory for executables.
VCPKG_APPLOCAL_DEPS:BOOL=ON

// The directory which contains the installed libraries for each triplet
VCPKG_INSTALLED_DIR:PATH=C:/Users/jakob/Nextcloud/vcpkg/installed

// The path to the vcpkg manifest directory.
VCPKG_MANIFEST_DIR:PATH=

// Use manifest mode, as opposed to classic mode.
VCPKG_MANIFEST_MODE:BOOL=OFF

// Appends the vcpkg paths to CMAKE_PREFIX_PATH, CMAKE_LIBRARY_PATH and CMAKE_FIND_ROOT_PATH so that vcpkg libraries/packages are found after toolchain/system libraries/packages.
VCPKG_PREFER_SYSTEM_LIBS:BOOL=OFF

// Enable the setup of CMAKE_PROGRAM_PATH to vcpkg paths
VCPKG_SETUP_CMAKE_PROGRAM_PATH:BOOL=ON

// Vcpkg target triplet (ex. x86-windows)
VCPKG_TARGET_TRIPLET:STRING=x64-windows

// Trace calls to find_package()
VCPKG_TRACE_FIND_PACKAGE:BOOL=OFF

// Enables messages from the VCPKG toolchain for debugging purposes.
VCPKG_VERBOSE:BOOL=OFF

// (experimental) Automatically copy dependencies into the install target directory for executables. Requires CMake 3.14.
X_VCPKG_APPLOCAL_DEPS_INSTALL:BOOL=OFF

// (experimental) Add USES_TERMINAL to VCPKG_APPLOCAL_DEPS to force serialization.
X_VCPKG_APPLOCAL_DEPS_SERIALIZED:BOOL=OFF

// Path to a program.
Z_VCPKG_BUILTIN_POWERSHELL_PATH:FILEPATH=C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe

// Path to a program.
Z_VCPKG_PWSH_PATH:FILEPATH=Z_VCPKG_PWSH_PATH-NOTFOUND

// The directory which contains the installed libraries for each triplet
_VCPKG_INSTALLED_DIR:PATH=C:/Users/jakob/Nextcloud/vcpkg/installed
